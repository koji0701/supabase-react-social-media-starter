// This file is automatically generated. Do not edit it directly.
import { createClient, type Session, type AuthChangeEvent } from '@supabase/supabase-js';
import type { Database } from './types';

console.log("ðŸ”Œ [SUPABASE] Initializing Supabase client");

// TODO: Replace with your own Supabase URL and publishable key
// NOTE: These are safe to expose in the frontend. Read more: https://supabase.com/docs/guides/api/api-keys
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;


console.log(`ðŸ”Œ [SUPABASE] Using URL: ${SUPABASE_URL}`);

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create client with debug logging and Realtime configuration
const supabaseClient = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage, // localStorage is fine, but session won't persist across browser close
    persistSession: false, // Disable session persistence
    autoRefreshToken: true, // Still useful for long-lived active sessions within a single use
    debug: true,
  },
  realtime: {
    params: {
      log_level: 'info', // Enable logging for Realtime connections
    },
  },
});

// Add logging for auth state changes for debugging
supabaseClient.auth.onAuthStateChange((event, session) => {
  console.log(`ðŸ”Œ [SUPABASE_RAW_CLIENT] Auth event: ${event}, hasSession: ${!!session}`);
  // INITIAL_SESSION will now typically be null if persistSession is false
});

// Removed: explicit call to supabaseClient.auth.getSession() that logged any existing session.
// onAuthStateChange will fire with INITIAL_SESSION immediately.

// Create a wrapped client with logging for exports
export const supabase = {
  ...supabaseClient,
  // Add logging to auth methods
  auth: {
    ...supabaseClient.auth, // Spreading methods here can lead to `this` context issues for non-wrapped methods
    signInWithPassword: async (credentials: {email: string, password: string}) => {
      console.log(`ðŸ”Œ [SUPABASE] Attempting sign in for: ${credentials.email}`);
      const result = await supabaseClient.auth.signInWithPassword(credentials);
      console.log('ðŸ”Œ [SUPABASE] Sign in result:', { 
        success: !result.error,
        errorMessage: result.error?.message,
        hasUser: !!result.data.user,
        hasSession: !!result.data.session
      });
      return result;
    },
    signUp: async (credentials: {email: string, password: string}) => {
      console.log(`ðŸ”Œ [SUPABASE] Attempting sign up for: ${credentials.email}`);
      const result = await supabaseClient.auth.signUp(credentials);
      console.log('ðŸ”Œ [SUPABASE] Sign up result:', { 
        success: !result.error,
        errorMessage: result.error?.message,
        hasUser: !!result.data.user,
        hasSession: !!result.data.session
      });
      return result;
    },
    signOut: async () => {
      console.log('ðŸ”Œ [SUPABASE] Signing out user');
      const result = await supabaseClient.auth.signOut();
      console.log('ðŸ”Œ [SUPABASE] Sign out result:', { 
        success: !result.error,
        errorMessage: result.error?.message
      });
      return result;
    },
    getSession: async () => {
      console.log('ðŸ”Œ [SUPABASE] Getting session');
      const result = await supabaseClient.auth.getSession();
      console.log('ðŸ”Œ [SUPABASE] Get session result:', { 
        success: !result.error,
        hasSession: !!result.data.session
      });
      return result;
    },
    onAuthStateChange: (callback: (event: AuthChangeEvent, session: Session | null) => void) => {
      console.log('ðŸ”Œ [SUPABASE WRAPPER] Registering onAuthStateChange callback');
      // Call the original onAuthStateChange method on the original supabaseClient.auth object
      // This ensures 'this' inside onAuthStateChange refers to supabaseClient.auth
      const result = supabaseClient.auth.onAuthStateChange(callback);
      console.log('ðŸ”Œ [SUPABASE WRAPPER] onAuthStateChange subscription successful:', { hasSubscription: !!result.data.subscription });
      return result;
    },
  },
  // Add Storage API with logging
  storage: {
    from: (bucketName: string) => {
      console.log(`ðŸ”Œ [SUPABASE] Storage operation on bucket: ${bucketName}`);
      return supabaseClient.storage.from(bucketName);
    }
  },
  // Forward other methods directly with type preservation
  from: <T extends keyof Database['public']['Tables']>(table: T) => {
    console.log(`ðŸ”Œ [SUPABASE] Database query on table: ${table}`);
    return supabaseClient.from(table);
  },
  rpc: <T extends keyof Database['public']['Functions']>(fn: T, params?: Database['public']['Functions'][T]['Args']) => {
    console.log(`ðŸ”Œ [SUPABASE] RPC call to function: ${fn}`);
    return supabaseClient.rpc(fn, params);
  },
  // Add Realtime capabilities with logging
  channel: (name: string, opts?: any) => {
    console.log(`ðŸ”Œ [SUPABASE] Creating Realtime channel: ${name}`, opts);
    return supabaseClient.channel(name, opts);
  },
  realtime: {
    ...supabaseClient.realtime,
    setAuth: async (token?: string | null) => {
      console.log('ðŸ”Œ [SUPABASE] Setting Realtime auth token');
      const result = await supabaseClient.realtime.setAuth(token);
      console.log('ðŸ”Œ [SUPABASE] Realtime auth result: completed');
      return result;
    },
  },
  removeChannel: (channel: any) => {
    console.log('ðŸ”Œ [SUPABASE] Removing Realtime channel');
    return supabaseClient.removeChannel(channel);
  }
};