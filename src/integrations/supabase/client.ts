// This file is automatically generated. Do not edit it directly.
import { createClient, Session, AuthChangeEvent } from '@supabase/supabase-js'; // Added Session and AuthChangeEvent
import type { Database } from './types';

console.log("ðŸ”Œ [SUPABASE] Initializing Supabase client");

const SUPABASE_URL = "https://ampnkxaegqevdmmwycxh.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFtcG5reGFlZ3FldmRtbXd5Y3hoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc3ODgzMDgsImV4cCI6MjA2MzM2NDMwOH0.BDE5VIOhrvxTI2MfRte6exLThJyE2WjvNdbxKVXpd1g";

console.log(`ðŸ”Œ [SUPABASE] Using URL: ${SUPABASE_URL}`);

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create client with debug logging
const supabaseClient = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage, // localStorage is fine, but session won't persist across browser close
    persistSession: false, // Disable session persistence
    autoRefreshToken: true, // Still useful for long-lived active sessions within a single use
    debug: true,
  },
});

// Add logging for auth state changes for debugging
supabaseClient.auth.onAuthStateChange((event, session) => {
  console.log(`ðŸ”Œ [SUPABASE_RAW_CLIENT] Auth event: ${event}, hasSession: ${!!session}`);
  // INITIAL_SESSION will now typically be null if persistSession is false
});

// Removed: explicit call to supabaseClient.auth.getSession() that logged any existing session.
// onAuthStateChange will fire with INITIAL_SESSION immediately.

// Create a wrapped client with logging for exports
export const supabase = {
  ...supabaseClient,
  // Add logging to auth methods
  auth: {
    ...supabaseClient.auth, // Spreading methods here can lead to `this` context issues for non-wrapped methods
    signInWithPassword: async (credentials: {email: string, password: string}) => {
      console.log(`ðŸ”Œ [SUPABASE] Attempting sign in for: ${credentials.email}`);
      const result = await supabaseClient.auth.signInWithPassword(credentials);
      console.log(`ðŸ”Œ [SUPABASE] Sign in result:`, { 
        success: !result.error,
        errorMessage: result.error?.message,
        hasUser: !!result.data.user,
        hasSession: !!result.data.session
      });
      return result;
    },
    signUp: async (credentials: any) => {
      console.log(`ðŸ”Œ [SUPABASE] Attempting sign up for: ${credentials.email}`);
      const result = await supabaseClient.auth.signUp(credentials);
      console.log(`ðŸ”Œ [SUPABASE] Sign up result:`, { 
        success: !result.error,
        errorMessage: result.error?.message,
        hasUser: !!result.data.user,
        hasSession: !!result.data.session
      });
      return result;
    },
    signOut: async () => {
      console.log(`ðŸ”Œ [SUPABASE] Signing out user`);
      const result = await supabaseClient.auth.signOut();
      console.log(`ðŸ”Œ [SUPABASE] Sign out result:`, { 
        success: !result.error,
        errorMessage: result.error?.message
      });
      return result;
    },
    getSession: async () => {
      console.log(`ðŸ”Œ [SUPABASE] Getting session`);
      const result = await supabaseClient.auth.getSession();
      console.log(`ðŸ”Œ [SUPABASE] Get session result:`, { 
        success: !result.error,
        hasSession: !!result.data.session
      });
      return result;
    },
    onAuthStateChange: (callback: (event: AuthChangeEvent, session: Session | null) => void) => {
      console.log(`ðŸ”Œ [SUPABASE WRAPPER] Registering onAuthStateChange callback`);
      // Call the original onAuthStateChange method on the original supabaseClient.auth object
      // This ensures 'this' inside onAuthStateChange refers to supabaseClient.auth
      const result = supabaseClient.auth.onAuthStateChange(callback);
      if (result.error) {
        console.error(`ðŸ”Œ [SUPABASE WRAPPER] Error subscribing to onAuthStateChange:`, result.error);
      } else {
        console.log(`ðŸ”Œ [SUPABASE WRAPPER] onAuthStateChange subscription successful:`, { hasSubscription: !!result.data.subscription });
      }
      return result;
    },
  },
  // Forward other methods directly
  from: (table: string) => {
    console.log(`ðŸ”Œ [SUPABASE] Database query on table: ${table}`);
    return supabaseClient.from(table);
  },
  rpc: (fn: string, params?: any) => {
    console.log(`ðŸ”Œ [SUPABASE] RPC call to function: ${fn}`);
    return supabaseClient.rpc(fn, params);
  }
};